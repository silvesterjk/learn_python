Key FastAPI Features:
- Fast: Very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). One of the fastest Python frameworks available.
- Fast to code: Increase the speed to develop features by about 200% to 300%.
- Fewer bugs: Reduce about 40% of human-induced errors (bugs).
- Intuitive: Great editor support. Completion everywhere. Less time debugging.
- Easy: Designed to be easy to use and learn. Less time reading docs.
- Short: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.
- Robust: Get production-ready code. With automatic interactive documentation.
- Standards-based: Based on (and fully compatible with) the open standards for APIs: OpenAPI (previously known as Swagger) and JSON Schema.

Feature Highlights:
- Automatic data model validation: Uses Pydantic for data validation, serialization, and documentation.
- Automatic API documentation: Interactive API documentation (Swagger UI and ReDoc) generated automatically.
- Dependency Injection: A simple but powerful dependency injection system.
- Async support: Full support for asynchronous programming with `async` and `await`.
- WebSocket support: Easy to implement WebSocket communication.
- Security and Authentication: Includes tools for common authentication and authorization schemes (e.g., OAuth2, HTTP Basic Auth).
- Plugin-based architecture: Easily extensible with plugins.
- Type hints: Extensive use of Python type hints, providing great editor support (autocompletion, type checking) and data validation.
- Starlette features: Inherits features from Starlette, such as:
    - GraphQL support
    - Background tasks
    - Event handlers (startup/shutdown)
    - CORS, GZip, Static Files, Streaming responses
- Testing: Utilities to easily test your API.
- Data serialization/deserialization: Automatic conversion between Python types and JSON.
- Path parameters and Query parameters: Easy declaration and validation.
- Request body: Support for complex data structures in request bodies (JSON, form data, files).
- Response models: Define response data structures and validation.
- Status codes and error handling: Flexible ways to return HTTP status codes and handle errors.
